%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Sep  8 15:45:59 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (NP_862552_Lactococcus_lactis_subsp_lactis_W-37_pSRQ900)
} def

/sequence { (\
UAUCCAAGCCAUAGUUGGAAUUGAUAAAAUUGGAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 19 0.004112898 ubox
1 20 0.032930668 ubox
1 23 0.046339443 ubox
1 24 0.007692019 ubox
1 26 0.675309386 ubox
1 27 0.032893588 ubox
1 28 0.013307555 ubox
1 29 0.007466670 ubox
1 32 0.008648915 ubox
1 33 0.003433399 ubox
1 34 0.005422726 ubox
1 35 0.016878971 ubox
2 21 0.049168436 ubox
2 22 0.045659475 ubox
2 25 0.715534189 ubox
2 30 0.004366670 ubox
2 31 0.008640734 ubox
3 19 0.417258167 ubox
3 20 0.038459208 ubox
3 23 0.003245612 ubox
3 24 0.719611274 ubox
3 26 0.008054802 ubox
3 27 0.007820696 ubox
3 29 0.003442239 ubox
3 33 0.004903396 ubox
3 34 0.425071334 ubox
3 35 0.006319327 ubox
4 18 0.456274809 ubox
4 23 0.689430366 ubox
4 32 0.007353647 ubox
4 33 0.454409899 ubox
5 17 0.456435851 ubox
5 18 0.009170606 ubox
5 23 0.307196241 ubox
5 32 0.454299342 ubox
5 33 0.004013050 ubox
5 35 0.003993733 ubox
6 15 0.006705176 ubox
6 16 0.434300868 ubox
6 21 0.387330794 ubox
6 22 0.368335916 ubox
6 30 0.010298765 ubox
6 31 0.432572511 ubox
7 12 0.009491299 ubox
7 15 0.404628194 ubox
7 16 0.135823959 ubox
7 21 0.367970221 ubox
7 22 0.034884802 ubox
7 25 0.004728277 ubox
7 30 0.367397857 ubox
7 31 0.020298572 ubox
8 12 0.008858921 ubox
8 15 0.193558263 ubox
8 21 0.042038717 ubox
8 22 0.023580215 ubox
8 25 0.024069285 ubox
8 30 0.026858908 ubox
8 31 0.003180747 ubox
9 14 0.235353620 ubox
9 17 0.004059050 ubox
9 18 0.848513087 ubox
9 23 0.004307852 ubox
9 33 0.055083280 ubox
10 14 0.021278536 ubox
10 17 0.849660447 ubox
10 18 0.013113582 ubox
10 23 0.043514832 ubox
10 32 0.055251020 ubox
10 33 0.004670971 ubox
11 15 0.011369474 ubox
11 16 0.819609459 ubox
11 21 0.006555438 ubox
11 22 0.042525573 ubox
11 25 0.060958837 ubox
11 30 0.007557599 ubox
11 31 0.053766482 ubox
12 17 0.004333620 ubox
12 19 0.003682133 ubox
12 20 0.007718952 ubox
12 23 0.110015463 ubox
12 24 0.051475038 ubox
12 26 0.072441014 ubox
12 27 0.041456642 ubox
12 28 0.004082151 ubox
12 29 0.009779761 ubox
12 32 0.007203838 ubox
13 21 0.013175989 ubox
13 22 0.121986063 ubox
13 25 0.068020481 ubox
13 30 0.005406373 ubox
13 31 0.011103946 ubox
14 21 0.121750673 ubox
14 22 0.038544070 ubox
14 25 0.134962063 ubox
14 30 0.021414879 ubox
15 19 0.006455381 ubox
15 20 0.115243600 ubox
15 23 0.030771974 ubox
15 24 0.142608424 ubox
15 26 0.006628859 ubox
15 27 0.051493094 ubox
15 28 0.007261408 ubox
15 29 0.023106166 ubox
15 34 0.005135961 ubox
16 20 0.014042534 ubox
16 23 0.139492261 ubox
16 24 0.017952281 ubox
16 26 0.052436566 ubox
16 27 0.008442829 ubox
16 28 0.022956484 ubox
16 33 0.005535022 ubox
17 21 0.013613570 ubox
17 22 0.087030587 ubox
17 25 0.051798600 ubox
18 22 0.011682422 ubox
18 25 0.004449222 ubox
18 31 0.005638267 ubox
19 25 0.020288430 ubox
19 30 0.012534648 ubox
19 31 0.149008300 ubox
20 25 0.016832563 ubox
20 30 0.193670908 ubox
20 31 0.016830301 ubox
21 26 0.027324199 ubox
21 27 0.025776042 ubox
21 28 0.094801613 ubox
21 29 0.206686164 ubox
21 32 0.005309110 ubox
21 33 0.029079745 ubox
21 34 0.092539684 ubox
21 35 0.010688639 ubox
22 26 0.024702051 ubox
22 27 0.107271827 ubox
22 28 0.210439182 ubox
22 29 0.054039667 ubox
22 32 0.044335369 ubox
22 33 0.099463922 ubox
22 34 0.015126860 ubox
22 35 0.011643550 ubox
23 30 0.006889718 ubox
23 31 0.059183973 ubox
24 30 0.061365056 ubox
24 31 0.102134479 ubox
25 29 0.055265099 ubox
25 32 0.024247839 ubox
25 33 0.005572303 ubox
25 34 0.010840727 ubox
25 35 0.003483756 ubox
26 30 0.006832695 ubox
26 31 0.025120612 ubox
27 31 0.012123661 ubox
30 34 0.009255150 ubox
30 35 0.009254564 ubox
31 35 0.005715018 ubox
1 26 0.9500000 lbox
2 25 0.9500000 lbox
3 24 0.9500000 lbox
4 23 0.9500000 lbox
9 18 0.9500000 lbox
10 17 0.9500000 lbox
11 16 0.9500000 lbox
showpage
end
%%EOF
