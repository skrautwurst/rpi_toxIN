%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Tue Sep  8 15:45:11 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (Haemophilus_parasuis)
} def

/sequence { (\
CUUAAUUUGGUGUAGGCUACCGUAUAGUGCCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.089378281 ubox
1 10 0.173802470 ubox
1 12 0.037028895 ubox
1 15 0.016572516 ubox
1 16 0.014714217 ubox
1 27 0.101722532 ubox
1 29 0.056894629 ubox
1 32 0.010865665 ubox
2 9 0.173273455 ubox
2 10 0.034569101 ubox
2 12 0.011110173 ubox
2 14 0.025608824 ubox
2 15 0.016023943 ubox
2 24 0.004224277 ubox
2 26 0.099538334 ubox
2 27 0.076277687 ubox
2 29 0.015665483 ubox
2 32 0.003786126 ubox
3 9 0.042457430 ubox
3 10 0.019139884 ubox
3 12 0.031927868 ubox
3 14 0.052359952 ubox
3 24 0.038114152 ubox
3 26 0.093019240 ubox
3 27 0.035961399 ubox
3 29 0.032916971 ubox
3 32 0.003973084 ubox
4 8 0.037060478 ubox
4 11 0.033202115 ubox
4 13 0.052757002 ubox
4 23 0.039608522 ubox
4 25 0.081335460 ubox
4 28 0.034796222 ubox
5 11 0.040103911 ubox
5 13 0.071240490 ubox
5 23 0.034145154 ubox
5 25 0.190546469 ubox
5 28 0.050219700 ubox
6 10 0.037839125 ubox
6 12 0.073096400 ubox
6 14 0.015328639 ubox
6 22 0.029450505 ubox
6 24 0.201062608 ubox
6 26 0.013872842 ubox
6 27 0.050907862 ubox
6 29 0.004766787 ubox
6 32 0.008455128 ubox
7 12 0.018508276 ubox
7 14 0.028737692 ubox
7 15 0.003803453 ubox
7 19 0.003379092 ubox
7 22 0.012899078 ubox
7 24 0.032604071 ubox
7 26 0.049043514 ubox
7 27 0.007057887 ubox
7 29 0.005031339 ubox
7 32 0.014387361 ubox
8 12 0.007155405 ubox
8 14 0.025093831 ubox
8 19 0.075791829 ubox
8 22 0.290721745 ubox
8 24 0.008757964 ubox
8 26 0.006845879 ubox
8 27 0.003199691 ubox
8 29 0.054997439 ubox
8 32 0.297362241 ubox
9 13 0.022315502 ubox
9 17 0.003724278 ubox
9 18 0.083471099 ubox
9 21 0.357840725 ubox
9 23 0.006288529 ubox
9 25 0.004866291 ubox
9 28 0.089445111 ubox
9 30 0.007930503 ubox
9 31 0.507782686 ubox
10 17 0.084358541 ubox
10 20 0.357973018 ubox
10 21 0.010000682 ubox
10 25 0.011677433 ubox
10 28 0.006386497 ubox
10 30 0.508080661 ubox
10 31 0.029035710 ubox
11 16 0.083404223 ubox
11 19 0.356520219 ubox
11 22 0.003743416 ubox
11 24 0.012501769 ubox
11 26 0.139844930 ubox
11 27 0.005669025 ubox
11 29 0.495799090 ubox
11 32 0.013232185 ubox
12 17 0.077908571 ubox
12 18 0.328975789 ubox
12 20 0.025894165 ubox
12 21 0.005947601 ubox
12 23 0.013777056 ubox
12 25 0.260334968 ubox
12 28 0.236935112 ubox
12 30 0.036370818 ubox
12 31 0.015292426 ubox
13 19 0.026120523 ubox
13 22 0.007466809 ubox
13 24 0.267674644 ubox
13 26 0.259634042 ubox
13 27 0.057887715 ubox
13 29 0.036211037 ubox
13 32 0.027433066 ubox
14 18 0.023633007 ubox
14 23 0.263428696 ubox
14 25 0.259932343 ubox
14 28 0.020181822 ubox
15 20 0.026066827 ubox
15 21 0.175292475 ubox
15 23 0.010287840 ubox
15 25 0.027078778 ubox
15 28 0.019076770 ubox
15 30 0.010784752 ubox
15 31 0.767679300 ubox
16 20 0.172702747 ubox
16 21 0.193052183 ubox
16 23 0.297974283 ubox
16 25 0.011414392 ubox
16 28 0.294818405 ubox
16 30 0.768706873 ubox
16 31 0.012100114 ubox
17 22 0.311189143 ubox
17 27 0.301012879 ubox
17 29 0.758378162 ubox
18 22 0.005895708 ubox
18 24 0.017184401 ubox
18 26 0.301944083 ubox
18 27 0.064044561 ubox
18 29 0.124533999 ubox
19 23 0.015988914 ubox
19 25 0.287898038 ubox
19 28 0.636630327 ubox
20 27 0.643289398 ubox
20 29 0.008707449 ubox
20 32 0.011860232 ubox
21 27 0.158563398 ubox
21 29 0.005803369 ubox
21 32 0.017510342 ubox
22 28 0.007947786 ubox
22 30 0.080442498 ubox
22 31 0.024090324 ubox
23 27 0.003948781 ubox
23 29 0.080503263 ubox
24 28 0.067105524 ubox
25 32 0.003652500 ubox
27 31 0.012763435 ubox
15 31 0.9500000 lbox
16 30 0.9500000 lbox
17 29 0.9500000 lbox
19 28 0.9500000 lbox
20 27 0.9500000 lbox
showpage
end
%%EOF
